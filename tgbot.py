import asyncio
import logging

from telebot.async_telebot import AsyncTeleBot, types, logger
from re import match
from datetime import date

from provisor import add_drug_by_datamatrix, add_drug_by_text, get_all_drugs, delete_drug, get_overdue, delete_overdue


BOT_TOKEN = ""


log = logger
log.setLevel(logging.DEBUG)


bot = AsyncTeleBot(token=BOT_TOKEN)


@bot.message_handler(commands=["start"])
async def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    start_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
    markup.add(start_button)
    await bot.send_message(
        chat_id=message.from_user.id,
        text="üíä –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Provisor.io üíä\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞–º–∏. –î–æ–±–∞–≤—å –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã, –∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —É –Ω–∏—Ö –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏.\n\n–ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É",
        parse_mode='Markdown',
        reply_markup=markup
    )


@bot.message_handler(content_types=["text"])
async def using(message):

    drug_m = match(".*@\d{4}-\d{2}-\d{2}", message.text)
    del_m = match("–£–¥–∞–ª–∏—Ç—å \d+", message.text)

    try:
        if int(message.text):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            delete_button = types.KeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {message.text}")
            cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
            markup.add(delete_button, cancel_button)
            await bot.send_message(
                chat_id=message.from_user.id,
                text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç {message.text}?",
                reply_markup=markup
            )
    except ValueError:
        if message.text == "–ù–∞—á–∞—Ç—å":
            markup = main_markup()
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤—Ä—É—á–Ω—É—é",
                reply_markup=markup
            )

        elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ":
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"
            )

        elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–±–∞–∫–æ–π @\n\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n`–ü–∞—Ä–∞—Ü–µ—Ç–æ–º–æ–ª 24 —Ç–∞–±.@2024-01-24`",
                parse_mode='Markdown'
            )

        elif drug_m:
            is_adding_success, product_name = add_drug_by_text(message.from_user.id, message.text, log)
            markup = main_markup()
            if is_adding_success:
                await bot.send_message(
                    chat_id=message.from_user.id,
                    text=f"–ü—Ä–µ–ø–∞—Ä–∞—Ç ¬´{product_name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                    reply_markup=markup
                )
            else:
                await bot.send_message(
                    chat_id=message.from_user.id,
                    text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞",
                    reply_markup=markup
                )

        elif message.text == "–ú–æ–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã":
            all_drugs = get_all_drugs(message.from_user.id, log)
            markup = main_markup()
            if all_drugs != "":
                await bot.send_message(
                    chat_id=message.from_user.id,
                    text=all_drugs,
                    reply_markup=markup
                )
            else:
                await bot.send_message(
                    chat_id=message.from_user.id,
                    text="–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞",
                    reply_markup=markup
                )

        elif message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç":
            all_drugs = get_all_drugs(message.from_user.id, log)
            if all_drugs != "":
                await bot.send_message(
                    chat_id=message.from_user.id,
                    text=all_drugs
                )
                await bot.send_message(
                    chat_id=message.from_user.id,
                    text="–í—ã—à–µ —è –ø—Ä–∏—Å–ª–∞–ª —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞"
                )
            else:
                markup = main_markup()
                await bot.send_message(
                    chat_id=message.from_user.id,
                    text="–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞",
                    reply_markup=markup
                )

        elif del_m:
            markup = main_markup()
            drug_to_del = int(message.text[8:])
            delete_drug(message.from_user.id, drug_to_del, log)
            await bot.send_message(
                chat_id=message.from_user.id,
                text=f"–ü—Ä–µ–ø–∞—Ä–∞—Ç {drug_to_del} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞",
                reply_markup=markup
            )

        elif message.text == "–û—Ç–º–µ–Ω–∞":
            markup = main_markup()
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=markup
            )

        elif message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ":
            markup = main_markup()
            delete_overdue(message.from_user.id, log)
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã",
                reply_markup=markup
            )

        else:
            markup = main_markup()
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                reply_markup=markup
            )


@bot.message_handler(content_types=["photo"])
async def handle_photo(message):
    file = await bot.get_file(message.photo[-1].file_id)
    photo = await bot.download_file(file.file_path)
    await bot.send_message(
        chat_id=message.from_user.id,
        text="–î–∞–π –º–Ω–µ –º–∏–Ω—É—Ç–∫—É, –ø—ã—Ç–∞—é—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É...",
    )
    is_adding_success, product_name = add_drug_by_datamatrix(photo, message.from_user.id, log)
    if is_adding_success:
        markup = main_markup()
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f"–ü—Ä–µ–ø–∞—Ä–∞—Ç ¬´{product_name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
            reply_markup=markup
        )
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        add_man_button = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é")
        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        markup.add(add_man_button, cancel_button)
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å –≤—Ä—É—á–Ω—É—é",
            reply_markup=markup
        )


def main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    add_button = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ")
    add_man_button = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é")
    view_list_button = types.KeyboardButton("–ú–æ–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã")
    delete_button = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç")
    markup.add(add_button, add_man_button, view_list_button, delete_button)
    return markup


async def check_overdue():
    while True:
        overdue = get_overdue(log)
        markup = main_markup()
        delete_overdue_button = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ")
        markup.add(delete_overdue_button)
        if len(overdue) > 0:
            for user in overdue:
                overdue_list = "–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏:\n\n"
                for drug in overdue[user]:
                    name, exp_date = drug
                    overdue_list += f"{name} (–¥–æ {date.fromordinal(exp_date).isoformat()})\n"
                await bot.send_message(
                    chat_id=user,
                    text=overdue_list,
                    reply_markup=markup
                )
        await asyncio.sleep(86400)


async def main():
    await asyncio.gather(bot.polling(non_stop=True, interval=0), check_overdue())
